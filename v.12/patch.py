import os
import re
import time
import json
import socket
import string
import random
import logging
import asyncio
import sqlite3
import paramiko
import asyncssh
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from config import BOT_TOKEN
import config

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import (
    Message, 
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile
)
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from config import ADMIN_IDS, ADMIN_IDS2, ADMIN_PREM
 
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegistrationStates(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_country = State()

class NicknameStates(StatesGroup):
    waiting_for_nickname = State()

class IDChangeStates(StatesGroup):
    waiting_for_id = State()

class ReviewStates(StatesGroup):
    waiting_for_review = State()

class AdminPremiumStates(StatesGroup):
    waiting_for_user_id = State()

class ReferralStates(StatesGroup):
    waiting_for_code = State()

class BanStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_reason = State()
    waiting_for_duration = State()

class UnbanStates(StatesGroup):
    waiting_for_username = State()

class NewsStates(StatesGroup):
    waiting_for_news = State()

class ReportStates(StatesGroup):
    waiting_for_report = State()

class SearchStates(StatesGroup):
    waiting_for_search = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.executescript('''
CREATE TABLE IF NOT EXISTS users (
    user_id TEXT PRIMARY KEY,
    random_id TEXT UNIQUE,
    user_name TEXT UNIQUE,
    registration_date TEXT,
    country TEXT,
    premium TEXT,
    kills INTEGER DEFAULT 0,
    deaths INTEGER DEFAULT 0,
    match_count INTEGER DEFAULT 0,
    adr REAL DEFAULT 0.0,
    avg REAL DEFAULT 0.0,
    wins INTEGER DEFAULT 0,
    losses INTEGER DEFAULT 0,
    hidden INTEGER DEFAULT 0,
    active_game TEXT DEFAULT NULL,
    ban_status INTEGER DEFAULT 0,
    ban_until TEXT DEFAULT NULL,
    referral_code INTEGER DEFAULT 0,
    referral_count INTEGER DEFAULT 0,
    ban_reason TEXT,
    used INTEGER DEFAULT 0,
    elo INTEGER DEFAULT 1000,
    ban_end_time DATETIME
);

CREATE TABLE IF NOT EXISTS friends (
    user_id TEXT,
    friend_id TEXT,
    added_date TEXT,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (friend_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS matches (
    match_id TEXT PRIMARY KEY,
    start_time TEXT,
    end_time TEXT,
    map TEXT,
    server_ip TEXT,
    server_port INTEGER,
    status TEXT
);

CREATE TABLE IF NOT EXISTS match_stats (
    match_id TEXT,
    user_id TEXT,
    team TEXT,
    kills INTEGER DEFAULT 0,
    deaths INTEGER DEFAULT 0,
    assists INTEGER DEFAULT 0,
    score INTEGER DEFAULT 0,
    mvps INTEGER DEFAULT 0,
    ping INTEGER DEFAULT 0,
    PRIMARY KEY (match_id, user_id),
    FOREIGN KEY (match_id) REFERENCES matches(match_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS bans (
    ban_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    admin_id TEXT,
    ban_reason TEXT,
    ban_date TEXT,
    unban_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (admin_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS reports (
    report_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    reported_user_id TEXT,
    report_text TEXT,
    report_date TEXT,
    status TEXT DEFAULT 'pending',
    admin_comment TEXT,
    resolved_by TEXT,
    resolved_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (reported_user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    review_text TEXT,
    review_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS active_servers (
    server_id TEXT PRIMARY KEY,
    ip TEXT,
    port INTEGER,
    map TEXT,
    status TEXT,
    start_time TEXT,
    player_count INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS premium_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    start_date TEXT,
    end_date TEXT,
    payment_method TEXT,
    amount REAL,
    status TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS referrals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    referrer_id TEXT,
    referred_id TEXT,
    date TEXT,
    status TEXT,
    FOREIGN KEY (referrer_id) REFERENCES users(user_id),
    FOREIGN KEY (referred_id) REFERENCES users(user_id)
);
''')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
search_players = []
player_messages = {}
active_servers = {}
active_searches = {}
available_ports = [27015, 27016, 27017, 27018, 27019]
waiting_for_referral_code = {}
users = {}
premium_status_user = False
player_history = {}
user_cooldown = {}
COOLDOWN_TIME = 300
command_cooldowns = {}
def generate_random_id():
    return ''.join(random.choices(string.digits, k=9))
def generate_referral_code() -> str:
    while True:
        code = ''.join(random.choices(string.digits, k=6))
        cursor.execute("SELECT user_id FROM users WHERE referral_code = ?", (code,))
        if not cursor.fetchone():
            return code

def get_main_menu(premium: bool = False) -> ReplyKeyboardMarkup:
    buttons = [
        [
            KeyboardButton(text="üëë –ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton(text="üë• –î—Ä—É–∑—å—è")
        ],
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="/search")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"),
            KeyboardButton(text="üí≥ –ü—Ä–µ–º–∏—É–º" if not premium else "‚≠ê –ü—Ä–µ–º–∏—É–º –º–µ–Ω—é")
        ],
        [
            KeyboardButton(text="üìù–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞"),
            KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_premium_menu() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")],
        [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å ID")],
        [KeyboardButton(text="üîí –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_search_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å", callback_data="start_search"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_duration_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for duration, price in PRICING.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"‚≠ê {duration} - {price}‚ÇΩ",
                callback_data=f"duration:{duration}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for method in PAYMENT_DETAILS.keys():
        buttons.append([
            InlineKeyboardButton(
                text=f"üí≥ {method}",
                callback_data=f"payment:{method}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")]
    ]
    return
def create_inline_keyboard():
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    return markup

def create_reply_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    return markup

@router.message(Command("start"))
async def start(message: Message):
    try:
        user_id = str(message.from_user.id)

        cursor.execute("SELECT premium FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫!", callback_data="newbie")]
        ])

        start_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç! üéÆ\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ CMTV –¥–æ–ª–≥–æ –∏ —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª Faceit. "
            "–ú—ã —Å—Ç—Ä–µ–º–∏–ª–∏—Å—å —É—á–µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã —Å—Ç–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º. "
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±–µ—Ç–∞-—Ç–µ—Å—Ç–∞ –∏ –ø–æ–º–æ—á—å –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç!\n\n"
            "üîß **–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–µ—Å—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª:**\n"
            "- üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "- üéØ –ù–æ–≤–æ–µ –∏ –≤ —Ä–∞–∑—ã –ª—É—á—à–µ–µ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é.\n"
            "- ‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã.\n\n"
            "üí¨ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å?**\n"
            "1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Faceit ClientMod.\n"
            "2Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.\n"
            "3Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å, –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!!\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã –±–∞–≥–∏. –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, "
            "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –º–µ–Ω—é. –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—É—á—à–µ!\n\n"
            "üåü **–ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É!**"
        )

        if not user:
            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                photo = FSInputFile("start.png")
                await message.answer_photo(
                    photo=photo,
                    caption=start_text,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logging.warning("–§–∞–π–ª start.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                await message.answer(
                    start_text,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            except Exception as e:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await message.answer(
                    start_text,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
        else:
            # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            premium_status = user[0].lower() == '–¥–∞'
            markup = get_main_menu(premium=premium_status)
            await message.answer(
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–µ—Ç–∞ —Ç–µ—Å—Ç! ‚ù§Ô∏è",
                reply_markup=markup
            )

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.callback_query(F.data == "newbie")
async def handle_newbie(callback: CallbackQuery):
    try:
        await callback.message.answer(
            "‚ùïÔ∏è<b>Faceit ClientMod</b>‚ùïÔ∏è\n\n"
            "<b>–ß—Ç–æ —Ç–∞–∫–æ–µ Faceit?</b>\n"
            "FACEIT ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–Ω–ª–∞–π–Ω-—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ PvP-–∏–≥—Ä. –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–Ω–≥–∞–º –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã.\n\n"
            "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –≤ Faceit ClientMod?</b>\n"
            "1Ô∏è‚É£ ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç–µ Faceit ClientMod\n"
            "2Ô∏è‚É£ ‚Äî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /register\n"
            "3Ô∏è‚É£ ‚Äî –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ –≤ –º–∞—Ç—á–∞—Ö\n\n"
            "<b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥:</b>\n\n"
            "- <b>Register</b> ‚Äî> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–≥–æ Faceit –ø—Ä–æ—Ñ–∏–ª—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –∏ —Å—Ç—Ä–∞–Ω—É.\n"
            "- <b>Profile</b> ‚Äî> –í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...",  # –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
            parse_mode="HTML"
        )
    except Exception as e:
        await handle_error(e, callback.message)

@router.message(Command("register"))
async def register(message: Message, state: FSMContext):
    try:
        user_id = str(message.from_user.id)

        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        if cursor.fetchone():
            await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã:"
        )
        await state.set_state(RegistrationStates.waiting_for_nickname)
        await state.update_data(user_id=user_id)

    except Exception as e:
        await handle_error(e, message)

@router.message(RegistrationStates.waiting_for_nickname)
async def save_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not re.match(r'^[a-zA-Z0-9!@#$%^&*]{1,10}$', nickname):
        await message.answer(
            "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    cursor.execute("SELECT user_id FROM users WHERE user_name = ?", (nickname,))
    if cursor.fetchone():
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    await state.update_data(nickname=nickname)
    await message.answer("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üá∑üá∫ –¥–ª—è –†–æ—Å—Å–∏–∏):")
    await state.set_state(RegistrationStates.waiting_for_country)

# 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã –≤ RegistrationStates.waiting_for_country
@router.message(RegistrationStates.waiting_for_country)
async def save_country(message: Message, state: FSMContext):
    country = message.text.strip()
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥–æ–≤
    if not re.match(r'^[\U0001F1E6-\U0001F1FF]{2}$', country):
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üá∑üá∫ –¥–ª—è –†–æ—Å—Å–∏–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    data = await state.get_data()
    user_id = data['user_id']
    user_name = data['nickname']

    registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    random_id = generate_random_id()
    referral_code = generate_referral_code()

    cursor.execute("""
        INSERT INTO users 
        (user_id, random_id, user_name, registration_date, country, premium, 
        kills, deaths, match_count, adr, avg, wins, losses, hidden, referral_code)
        VALUES (?, ?, ?, ?, ?, ?, 0, 0, 0, 0.0, 0.0, 0, 0, 0, ?)
    """, (user_id, random_id, user_name, registration_date, country, '–Ω–µ—Ç', referral_code))
    conn.commit()

    await message.answer(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    markup = get_main_menu()
    await message.answer(
        "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=markup
    )
    await state.clear()  # –í
# 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
@router.callback_query(
    F.data == "start_search",
    ~StateFilter(RegistrationStates.waiting_for_country)
)
async def handle_start_search(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    search_id = search_manager.player_searches.get(user_id)

    if not search_id:
        await callback.answer("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    search_data = search_manager.active_searches.get(search_id)
    if not search_data or len(search_data['players']) < config.MIN_PLAYERS_FOR_START:
        await callback.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!")
        return

    await finish_search(search_id)
    await callback.answer("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á!")

@router.callback_query(
    F.data == "cancel_search",
    ~StateFilter(RegistrationStates.waiting_for_country)
)
async def handle_cancel_search(callback: CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        await search_manager.remove_player(user_id)

        try:
            await callback.message.edit_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        except TelegramBadRequest as telegram_error:
            if "message is not modified" not in str(telegram_error):
                await callback.message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
        try:
            await callback.message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        except:
            pass
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
PRICING = {
    "1 –º–µ—Å—è—Ü": 149,
    "3 –º–µ—Å—è—Ü–∞": 399,
    "1 –≥–æ–¥": 1299
}

PAYMENT_DETAILS = {
    "–ö–∞—Ä—Ç–∞ (OZON Bank)": "2204 3203 9586 7460",
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TRC20)": "TWvSQvNe7erMeYo218sQDebdzQwqkjWVHo", 
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TON)": "EQDD8dqOzaj4zUK6ziJOo_G2lx6qf1TEktTRkFJ7T1c_fPQb",
    "–ÆMoney": "4100118827695775"
}

async def handle_error(e: Exception, message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram 3

    Args:
        e (Exception): –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è aiogram
    """
    error_msg = f"Error occurred: {str(e)}"
    logging.error(error_msg)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                    f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_msg}"
                )
            except Exception as admin_error:
                logging.error(f"Failed to notify admin {admin_id}: {str(admin_error)}")

    except Exception as reply_error:
        logging.error(f"Failed to send error message: {str(reply_error)}")
@router.message(F.text == "üëë –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    try:
        user_id = str(message.from_user.id)
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            premium_status = user[5] == '–¥–∞'
            kills = user[6] or 0
            deaths = user[7] or 0
            matches = user[8] or 0
            adr = user[9] or 0.0
            avg_rating = user[10] or 0.0
            wins = user[11] or 0
            losses = user[12] or 0

            kd_ratio = kills if deaths == 0 else kills / deaths

            cursor.execute('SELECT referral_code, referral_count FROM users WHERE user_id = ?', (user_id,))
            referral_data = cursor.fetchone()
            random_id, referral_count = referral_data if referral_data else ("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 0)

            profile_text = (
                f"üéÆ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {user[2]}\n"
                f"üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {user[1]}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[3]}\n"
                f"üåç –†–µ–≥–∏–æ–Ω: {user[4]}\n\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {random_id}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referral_count}\n"
            )

            if premium_status:
                profile_text += (
                    f"\nüåü –ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üî• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                )

            await message.answer(profile_text)
        else:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /register.")
    except Exception as e:
        await handle_error(e, message)

@router.message(F.text == "üí≥ –ü—Ä–µ–º–∏—É–º")
async def premium_handler(message: Message, state: FSMContext):
    user_state = await state.get_data()
    if user_state.get("in_progress"):
        await message.answer(
            "–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π."
        )
        return

    await state.update_data(in_progress=True)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
        reply_markup=duration_keyboard()
    )
def get_db_connection():
    return sqlite3.connect("users.db")

def duration_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=f"‚≠ê {duration} - {price}‚ÇΩ", callback_data=f"duration:{duration}")]
        for duration, price in config.PREMIUM_DURATION.items()
    ]

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)  # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü

def payment_method_keyboard() -> InlineKeyboardMarkup:
    payment_methods = {
        "–ö–∞—Ä—Ç–∞ (OZON Bank)": "2204 3203 9586 7460",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TRC20)": "TWvSQvNe7erMeYo218sQDebdzQwqkjWVHo",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TON)": "EQDD8dqOzaj4zUK6ziJOo_G2lx6qf1TEktTRkFJ7T1c_fPQb",
        "–ÆMoney": "4100118827695775"
    }

    buttons = [
        [InlineKeyboardButton(text=f"üí≥ {method}", callback_data=f"payment:{method}")]
        for method in payment_methods.keys()
    ]

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)  # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü

def admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")]
    ])  # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü

@router.callback_query(F.data.startswith("duration:"))
async def select_duration(callback: CallbackQuery, state: FSMContext):
    duration = callback.data.split(":")[1]
    await state.update_data(duration=duration)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–æ–∫: {duration}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
        reply_markup=payment_method_keyboard()
    )

@router.callback_query(F.data.startswith("payment:"))
async def select_payment_method(callback: CallbackQuery, state: FSMContext):
    method = callback.data.split(":")[1]
    await state.update_data(payment_method=method)

    payment_methods = {
        "–ö–∞—Ä—Ç–∞ (OZON Bank)": "2204 3203 9586 7460",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TRC20)": "TWvSQvNe7erMeYo218sQDebdzQwqkjWVHo",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (TON)": "EQDD8dqOzaj4zUK6ziJOo_G2lx6qf1TEktTRkFJ7T1c_fPQb",
        "–ÆMoney": "4100118827695775"
    }

    user_data = await state.get_data()
    duration = user_data.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    details = payment_methods.get(method, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method}.\n\n"
        f"–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {duration}\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{details}\n\n"
        f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –ª–µ–∂–∏—Ç –Ω–∞ –≤–∞—Å.\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "cancel")
async def cancel_process(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.callback_query(F.data.startswith("confirm:"))
async def confirm_payment(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    try:
        db = get_db_connection()
        cursor = db.cursor()

        cursor.execute("UPDATE users SET premium = '–¥–∞' WHERE user_id = ?", (user_id,))
        db.commit()
        db.close()

        await callback.message.edit_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("reject:"))
async def reject_payment(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    await bot.send_message(user_id, "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        cursor.execute("SELECT user_name FROM users WHERE user_id = ?", (message.from_user.id,))
        player = cursor.fetchone()

        if not player:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        user_data = await state.get_data()
        if not user_data.get("in_progress"):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
            return

        duration = user_data.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        payment_method = user_data.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        admin_message = await bot.send_message(
            chat_id=config.ADMIN_PREM,
            text=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{message.from_user.username}.\n"
                 f"–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {duration}\n"
                 f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}.",
            reply_markup=admin_keyboard(message.from_user.id)
        )

        await message.forward(config.ADMIN_PREM)
        await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

def create_premium_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å ID")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


@router.message(F.text == "‚≠ê –ü—Ä–µ–º–∏—É–º –º–µ–Ω—é")
async def premium_menu_handler(message: Message):
    try:
        db = get_db_connection()
        cursor = db.cursor()

        user_id = str(message.from_user.id)
        cursor.execute("SELECT premium FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        db.close()

        if user and user[0] == '–¥–∞':
            markup = create_premium_menu()
            await message.answer("‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º-–º–µ–Ω—é!", reply_markup=markup)
        else:
            await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º-–º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ premium_menu_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.bot.delete_message(message.chat.id, message.message_id)

    # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(message)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class ChangeNicknameState(StatesGroup):
    waiting_for_nickname = State()


class ChangeIDState(StatesGroup):
    waiting_for_id = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")
async def change_nickname(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(ChangeNicknameState.waiting_for_nickname)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
@router.message(ChangeNicknameState.waiting_for_nickname)
async def process_new_nickname(message: Message, state: FSMContext):
    new_nickname = message.text.strip()
    db = get_db_connection()
    cursor = db.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ
    cursor.execute("SELECT * FROM users WHERE user_name=?", (new_nickname,))
    existing_user = cursor.fetchone()

    if existing_user:
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET user_name=? WHERE user_id=?", (new_nickname, message.from_user.id))
        db.commit()
        await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_nickname}.", reply_markup=create_premium_menu())

    db.close()
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å ID"
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å ID")
async def change_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID:")
    await state.set_state(ChangeIDState.waiting_for_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ ID
@router.message(ChangeIDState.waiting_for_id)
async def process_new_id(message: Message, state: FSMContext):
    new_random_id = message.text.strip()
    forbidden_ids = ["admin", "00000000"]  # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ ID

    db = get_db_connection()
    cursor = db.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º
    if new_random_id in forbidden_ids and message.from_user.id not in ADMIN_IDS2:
        await message.answer("‚ùå –≠—Ç–æ—Ç ID –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        db.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≤ –±–∞–∑–µ
    cursor.execute("SELECT * FROM users WHERE random_id=?", (new_random_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        await message.answer("‚ùå –≠—Ç–æ—Ç ID —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET random_id=? WHERE user_id=?", (new_random_id, message.from_user.id))
        db.commit()
        await message.answer(f"‚úÖ ID —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_random_id}.", reply_markup=create_premium_menu())

    db.close()
    await state.clear()

@router.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_for_review(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.from_user.id)
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è /register")
            return

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")
        await state.set_state(ReviewStates.waiting_for_review)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ReviewStates.waiting_for_review)
async def handle_review(message: Message, state: FSMContext):
    try:
        user_id = str(message.from_user.id)
        review_text = message.text.strip()

        if not review_text:
            await message.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO reviews (user_id, review_text, review_date)
            VALUES (?, ?, ?)
        """, (user_id, review_text, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤\n"
            f"–û—Ç: @{message.from_user.username or '–ù–µ—Ç username'} (ID: {user_id})\n"
            f"–¢–µ–∫—Å—Ç: {review_text}"
        )
        await bot.send_message(chat_id=int(config.ADMIN_PREM), text=admin_message)

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

class AdminPremiumStates(StatesGroup):
    waiting_for_user_id_take = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /take_premium
    waiting_for_user_id_give = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /give_premium


@router.message(Command("take_premium"))
async def take_premium(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å:")
    await state.set_state(AdminPremiumStates.waiting_for_user_id_take)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è /take_premium


@router.message(AdminPremiumStates.waiting_for_user_id_take)
async def process_take_premium_id(message: Message, state: FSMContext):
    player_id = message.text.strip()

    if not player_id.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        await state.clear()
        return

    cursor.execute("SELECT user_name, premium, user_id FROM users WHERE random_id = ?", (player_id,))
    player = cursor.fetchone()

    if not player:
        await message.answer("–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    try:
        # –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
        cursor.execute("UPDATE users SET premium = '–Ω–µ—Ç' WHERE random_id = ?", (player_id,))
        conn.commit()

        await message.answer(f"–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω —É –∏–≥—Ä–æ–∫–∞ —Å ID {player_id}.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        markup = get_main_menu(premium=False)
        await bot.send_message(
            player[2],
            "–í–∞—à –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—ã–ª —É–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            reply_markup=markup
        )
        await bot.send_message(player[2], "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        conn.rollback()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        await state.clear()


@router.message(Command("give_premium"))
async def give_premium(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å:")
    await state.set_state(AdminPremiumStates.waiting_for_user_id_give)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è /give_premium


@router.message(AdminPremiumStates.waiting_for_user_id_give)
async def process_give_premium_id(message: Message, state: FSMContext):
    player_id = message.text.strip()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID
    print(f"–í–≤–µ–¥–µ–Ω ID –∏–≥—Ä–æ–∫–∞: {player_id}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID

    if not player_id.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        await state.clear()
        return

    cursor.execute("SELECT user_name, premium, user_id FROM users WHERE random_id = ?", (player_id,))
    player = cursor.fetchone()

    if not player:
        await message.answer("–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    print(f"–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã: {player}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if player[1].strip() == '–¥–∞':
        await message.answer("–û—à–∏–±–∫–∞: –£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.")
        await state.clear()
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –Ω–∞ '–¥–∞'
        cursor.execute("UPDATE users SET premium = '–¥–∞' WHERE random_id = ?", (player_id,))
        conn.commit()

        await message.answer(f"–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É —Å ID {player_id}.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        markup = get_main_menu(premium=True)
        await bot.send_message(
            player[2],
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {player[0]}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            reply_markup=markup
        )
        await bot.send_message(player[2], "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        conn.rollback()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        await state.clear()
@router.message(F.text == "üë• –î—Ä—É–∑—å—è")
async def show_friends(message: Message):
    try:
        user_id = str(message.from_user.id)

        cursor.execute("""
            SELECT u.user_name, u.country, u.random_id, u.hidden, u.active_game
            FROM friends f
            JOIN users u ON f.friend_id = u.user_id
            WHERE f.user_id = ?
            UNION
            SELECT u.user_name, u.country, u.random_id, u.hidden, u.active_game
            FROM friends f
            JOIN users u ON f.user_id = u.user_id
            WHERE f.friend_id = ?
        """, (user_id, user_id))
        friends = cursor.fetchall()

        if not friends:
            try:
                photo = FSInputFile('friends.png')
                await message.answer_photo(
                    photo=photo,
                    caption="üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç."
                )
            except:
                await message.answer("üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç.")
            return

        response = "üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è:\n\n"
        for friend in friends:
            if friend[3] == 0:  # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞ –Ω–µ —Å–∫—Ä—ã—Ç
                status = "üéÆ –í –∏–≥—Ä–µ" if friend[4] else "üü¢ –û–Ω–ª–∞–π–Ω"
                response += f"üë§ {friend[0]} | {friend[1]} | ID: {friend[2]} | {status}\n"

        try:
            photo = FSInputFile('friends.png')
            await message.answer_photo(
                photo=photo,
                caption=response
            )
        except:
            await message.answer(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.")

class FriendStates(StatesGroup):
    waiting_for_friend = State()

@router.message(F.text == "‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞")
async def add_friend_handler(message: Message, state: FSMContext):
    try:
        await state.update_data(user_id=str(message.from_user.id))
        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞:")
        await state.set_state(FriendStates.waiting_for_friend)
    except Exception as e:
        await handle_error(e, message)

@router.message(FriendStates.waiting_for_friend)
async def process_friend_request(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data['user_id']
        target = message.text.strip()

        if not target:
            await message.reply("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        cursor.execute("""
            SELECT user_id, user_name, hidden, 
                   (SELECT COUNT(*) FROM friends WHERE 
                    (user_id = users.user_id AND friend_id = ?) OR 
                    (user_id = ? AND friend_id = users.user_id)) as is_friend
            FROM users 
            WHERE random_id = ? OR user_name = ?
        """, (user_id, user_id, target, target))
        result = cursor.fetchone()

        if not result:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        friend_id, friend_name, is_hidden, is_friend = result

        if user_id == friend_id:
            await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è.")
        elif is_hidden == 1:
            await message.reply(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {friend_name} —Å–∫—Ä—ã—Ç.")
        elif is_friend > 0:
            await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
        else:
            try:
                cursor.execute(
                    "INSERT INTO friends (user_id, friend_id, added_date) VALUES (?, ?, ?)",
                    (user_id, friend_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                )
                conn.commit()
                await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!")
            except Exception as e:
                conn.rollback()
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞.")
                logging.error(f"Error adding friend: {e}")

    except Exception as e:
        await handle_error(e, message)
    finally:
        await state.clear()
@router.message(F.text == "üéÆ –í—Å–µ –∏–≥—Ä–æ–∫–∏")
async def show_all_players(message: Message):
    try:
        cursor.execute("""
            SELECT user_name, country, random_id, hidden, active_game,
                   kills, deaths, match_count, premium
            FROM users 
            WHERE hidden = 0
            ORDER BY match_count DESC, kills DESC
        """)
        players = cursor.fetchall()

        if not players:
            await message.reply("üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç")
            return

        response = "üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for player in players:
            name, country, player_id, _, active_game, kills, deaths, matches, premium = player
            kd_ratio = kills / max(deaths, 1)
            status = "üéÆ –í –∏–≥—Ä–µ" if active_game else "üü¢ –û–Ω–ª–∞–π–Ω"
            premium_status = "‚≠ê" if premium == '–¥–∞' else ""

            response += (
                f"{premium_status}üë§ {name} | {country}\n"
                f"üìä K/D: {kd_ratio:.2f} | –ú–∞—Ç—á–∏: {matches}\n"
                f"üÜî ID: {player_id} | {status}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)

    except Exception as e:
        await handle_error(e, message)

class SearchManager:
    def __init__(self):
        self.player_searches = {}
        self.active_searches = {}
        self.active_servers = {}

    def create_new_search(self):
        search_id = len(self.active_searches) + 1
        self.active_searches[search_id] = {'players': []}
        return search_id

search_manager = SearchManager()

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    try:
        user_id = str(message.from_user.id)
        cursor.execute("""
            SELECT kills, deaths, match_count, wins, losses, 
                   adr, avg, premium, elo
            FROM users 
            WHERE user_id = ?
        """, (user_id,))
        stats = cursor.fetchone()

        if not stats:
            await message.reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        kills, deaths, matches, wins, losses, adr, avg, premium, elo = stats
        kd_ratio = kills / max(deaths, 1)
        win_rate = wins / max(matches, 1) * 100

        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è
        level = 1
        if elo > 500: level = 2
        if elo > 750: level = 3
        if elo > 900: level = 4
        if elo > 1050: level = 5
        if elo > 1200: level = 6
        if elo > 1350: level = 7
        if elo > 1530: level = 8
        if elo > 1750: level = 9
        if elo > 2000: level = 10

        stats_message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üéØ K/D: {kd_ratio:.2f}\n"
            f"üéÆ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {matches}\n"
            f"üî´ –£–±–∏–π—Å—Ç–≤: {kills}\n"
            f"üíÄ –°–º–µ—Ä—Ç–µ–π: {deaths}\n"
            f"üèÜ –ü–æ–±–µ–¥: {wins}\n"
            f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n"
            f"‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: {level} ({elo} ELO)\n"
        )

        if premium == '–¥–∞':
            stats_message += (
                "\n‚≠ê –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üí¢ ADR: {adr:.1f}\n"
                f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg:.1f}\n"
            )

        try:
            photo = FSInputFile('stats.png')
            await message.answer_photo(photo=photo, caption=stats_message)
        except:
            await message.answer(stats_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        if user_id not in ADMIN_IDS:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return

        action = callback.data.split("_")[1]

        if action == "restart_servers":
            await cleanup_servers()
            await callback.answer("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")
            await callback.message.edit_text("‚úÖ –°–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")

        elif action == "system_stats":
            stats = await get_system_stats()
            await callback.message.edit_text(stats)

        elif action == "manage_bans":
            await show_banned_users(callback.message)

    except Exception as e:
        await handle_error(e, callback.message)

async def get_system_stats():
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE premium = '–¥–∞'")
        premium_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM bans WHERE unban_date > datetime('now')")
        active_bans = cursor.fetchone()[0]

        cursor.execute("""
            SELECT COUNT(*), 
                   SUM(match_count), 
                   SUM(kills), 
                   SUM(deaths)
            FROM users
        """)
        stats = cursor.fetchone()

        return (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}\n"
            f"üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n"
            f"üéÆ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {stats[1] or 0}\n"
            f"üí• –í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤: {stats[2] or 0}\n"
            f"üíÄ –í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π: {stats[3] or 0}\n"
            f"üé≤ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(search_manager.active_servers)}\n"
            f"üîç –ò–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ: {len(search_manager.player_searches)}"
        )
    except Exception as e:
        logging.error(f"Error getting system stats: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
async def show_banned_users(message: Message):
    try:
        cursor.execute("""
            SELECT u.user_name, b.ban_reason, b.ban_date, b.unban_date
            FROM bans b
            JOIN users u ON b.user_id = u.user_id
            WHERE b.unban_date > datetime('now')
            ORDER BY b.unban_date DESC
        """)
        bans = cursor.fetchall()

        if not bans:
            await message.edit_text("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤")
            return

        ban_list = "üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for ban in bans:
            ban_list += (
                f"üë§ {ban[0]}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban[1]}\n"
                f"üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban[2]}\n"
                f"üìÖ –†–∞–∑–±–∞–Ω: {ban[3]}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await message.edit_text(ban_list)
    except Exception as e:
        await handle_error(e, message)

class ReportStates(StatesGroup):
    waiting_for_report = State()

@router.message(F.text == "üìù–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞")
async def start_report(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.from_user.id)
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è /register")
            return

        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
            "‚Ä¢ –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
        )
        await state.set_state(ReportStates.waiting_for_report)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ReportStates.waiting_for_report)
async def process_report(message: Message, state: FSMContext):
    try:
        user_id = str(message.from_user.id)
        report_text = message.text.strip()

        if not report_text:
            await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO reports (user_id, report_text, report_date, status)
            VALUES (?, ?, ?, 'pending')
        """, (user_id, report_text, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞\n"
            f"–û—Ç: @{message.from_user.username or '–ù–µ—Ç username'} (ID: {user_id})\n"
            f"–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:\n{report_text}"
        )
        await bot.send_message(chat_id=int(config.ADMIN_PREM), text=admin_message)

        await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

class NewsStates(StatesGroup):
    waiting_for_news = State()

@router.message(Command("send_news"))
async def send_news(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMIN_IDS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.")
        await state.set_state(NewsStates.waiting_for_news)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")

@router.message(NewsStates.waiting_for_news)
async def send_news_to_all(message: Message, state: FSMContext):
    try:
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()

        if users:
            failed_users = []
            for user in users:
                try:
                    await bot.send_message(user[0], f"üì∞ –ù–æ–≤–æ—Å—Ç—å: {message.text}")
                except Exception as e:
                    failed_users.append(user[0])
                    logging.error(f"Failed to send news to user {user[0]}: {e}")

            success_count = len(users) - len(failed_users)
            await message.answer(
                f"–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            )
        else:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    finally:
        await state.clear()

async def activate_premium(user_id: str, inviter_id: str):
    try:
        cursor.execute('UPDATE users SET premium = "–¥–∞" WHERE user_id = ?', (user_id,))

        cursor.execute('SELECT premium FROM users WHERE user_id = ?', (inviter_id,))
        inviter = cursor.fetchone()

        if inviter and inviter[0] != '–¥–∞':
            cursor.execute('UPDATE users SET premium = "–¥–∞" WHERE user_id = ?', (inviter_id,))

        cursor.execute('UPDATE users SET referral_count = referral_count + 1 WHERE user_id = ?', (inviter_id,))
        conn.commit()

        await bot.send_message(
            user_id,
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É! –í—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!"
        )

        await bot.send_message(
            inviter_id,
            f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! {user_id} —Å—Ç–∞–ª –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        )

        markup_user = create_main_menu(premium=True)
        markup_inviter = create_main_menu(premium=True)

        await bot.send_message(user_id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup_user)
        await bot.send_message(inviter_id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup_inviter)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ 100 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(deactivate_premium_later(user_id))

    except Exception as e:
        logging.error(f"Error in activate_premium: {e}")
        raise

async def deactivate_premium_later(user_id: str):
    await asyncio.sleep(100)
    await deactivate_premium(user_id)

async def deactivate_premium(user_id: str):
    try:
        cursor.execute('UPDATE users SET premium = "–Ω–µ—Ç" WHERE user_id = ?', (user_id,))
        conn.commit()

        markup = create_main_menu(premium=False)
        await bot.send_message(
            user_id,
            "–í–∞—à –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫.",
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"Error in deactivate_premium: {e}")

class ReferralStates(StatesGroup):
    waiting_for_code = State()
def generate_referral_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        code = ''.join(random.choices(string.digits, k=6))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
        cursor.execute("SELECT user_id FROM users WHERE referral_code = ?", (code,))
        if not cursor.fetchone():
            return code

def generate_random_password(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))

def search_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å", callback_data="start_search"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
        ]
    ])
    return keyboard

def generate_status_message(search_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–∏—Å–∫–∞"""
    search_data = search_manager.active_searches.get(search_id)
    if not search_data:
        return "‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    current_players = len(search_data['players'])
    player_list = "\n".join([f"üë§ {p['name']}" for p in search_data['players']])

    return (
        f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã\n\n"
        f"üë• –ò–≥—Ä–æ–∫–∏ ({current_players}/{config.MAX_PLAYERS}):\n"
        f"{player_list}\n\n"
        f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤..."
    )
@router.message(Command("referalcode"))
async def referalcode(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:")
    await state.set_state(ReferralStates.waiting_for_code)

@router.message(ReferralStates.waiting_for_code)
async def handle_referral_code(message: Message, state: FSMContext):
    try:
        user_id = str(message.from_user.id)
        referral_code = message.text.strip()

        cursor.execute(
            'SELECT user_id, premium, used FROM users WHERE referral_code = ?',
            (referral_code,)
        )
        result = cursor.fetchone()

        if not result:
            await message.answer("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
            await state.clear()
            return

        inviter_id, inviter_premium, used = result

        cursor.execute('SELECT used FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

        if user_data and user_data[0] == 1:
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
        elif str(inviter_id) == user_id:
            await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥.")
        else:
            await activate_premium(user_id, inviter_id)
            cursor.execute('UPDATE users SET used = 1 WHERE user_id = ?', (user_id,))
            conn.commit()

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {str(e)}")
        logging.error(f"Error in handle_referral_code: {e}")
    finally:
        await state.clear()
class BanStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_reason = State()
    waiting_for_duration = State()

class UnbanStates(StatesGroup):
    waiting_for_username = State()

@router.message(Command("ban"))
async def ban_user(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS2:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å:")
    await state.set_state(BanStates.waiting_for_username)

@router.message(BanStates.waiting_for_username)
async def process_ban_by_name(message: Message, state: FSMContext):
    user_name_to_ban = message.text.strip()

    cursor.execute(
        "SELECT user_id, user_name, ban_end_time FROM users WHERE user_name=?",
        (user_name_to_ban,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    user_id_to_ban, user_name, ban_end_time = user

    if ban_end_time:
        ban_end_time = datetime.strptime(ban_end_time, '%Y-%m-%d %H:%M:%S')
        if ban_end_time < datetime.now():
            cursor.execute(
                "UPDATE users SET ban_status=0, ban_reason=NULL WHERE user_id=?",
                (user_id_to_ban,)
            )
            conn.commit()
            await message.answer(f"–ë–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏—Å—Ç–µ–∫. –°—Ç–∞—Ç—É—Å —Å–Ω—è—Ç.")
            await state.clear()
            return

    await state.update_data(user_id_to_ban=user_id_to_ban, user_name=user_name)
    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–π–¥–µ–Ω (ID: {user_id_to_ban}). –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:"
    )
    await state.set_state(BanStates.waiting_for_reason)

@router.message(BanStates.waiting_for_reason)
async def ask_ban_duration(message: Message, state: FSMContext):
    await state.update_data(reason=message.text.strip())
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1d - 1 –¥–µ–Ω—å, 2h - 2 —á–∞—Å–∞, 1w - 1 –Ω–µ–¥–µ–ª—è):"
    )
    await state.set_state(BanStates.waiting_for_duration)

@router.message(BanStates.waiting_for_duration)
async def apply_ban(message: Message, state: FSMContext):
    try:
        duration = message.text.strip()
        data = await state.get_data()
        user_id_to_ban = data['user_id_to_ban']
        reason = data['reason']
        user_name = data['user_name']

        time_units = {'h': 'hours', 'd': 'days', 'w': 'weeks'}
        time_value = 0
        time_unit = None

        for unit, full_unit in time_units.items():
            if unit in duration:
                time_value = int(''.join(filter(str.isdigit, duration)))
                time_unit = full_unit
                break

        if time_value == 0 or not time_unit:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1d, 2h, 1w –∏ —Ç.–¥."
            )
            return

        if time_unit == 'hours':
            ban_end_time = datetime.now() + timedelta(hours=time_value)
        elif time_unit == 'days':
            ban_end_time = datetime.now() + timedelta(days=time_value)
        else:  # weeks
            ban_end_time = datetime.now() + timedelta(weeks=time_value)

        ban_end_time_str = ban_end_time.strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute(
            """UPDATE users 
               SET ban_status=1, ban_reason=?, ban_end_time=? 
               WHERE user_id=?""",
            (reason, ban_end_time_str, user_id_to_ban)
        )
        conn.commit()

        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–±–∞–Ω–µ–Ω.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞: {ban_end_time_str}"
        )

        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id_to_ban}) –∑–∞–±–∞–Ω–µ–Ω. "
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}. –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ban_end_time_str}"
        )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_ban}: {str(e)}")
    finally:
        await state.clear()

@router.message(Command("unban"))
async def unban_user(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS2:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å:")
    await state.set_state(UnbanStates.waiting_for_username)

@router.message(UnbanStates.waiting_for_username)
async def process_unban_by_name(message: Message, state: FSMContext):
    try:
        user_name_to_unban = message.text.strip()

        cursor.execute(
            "SELECT user_id, user_name, ban_status FROM users WHERE user_name=?",
            (user_name_to_unban,)
        )
        user = cursor.fetchone()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        user_id_to_unban, user_name, ban_status = user

        if ban_status == 0:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
            await state.clear()
            return

        cursor.execute(
            """UPDATE users 
               SET ban_status=0, ban_reason=NULL, ban_end_time=NULL 
               WHERE user_id=?""",
            (user_id_to_unban,)
        )
        conn.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id_to_unban}) —Ä–∞–∑–±–∞–Ω–µ–Ω.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    finally:
        await state.clear()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=config.LOG_FORMAT
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class SSHManager:
    def __init__(self):
        self.ssh_conn = None
        self.lock = asyncio.Lock()

    async def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            if self.ssh_conn:
                try:
                    self.ssh_conn.close()
                except:
                    pass

            max_attempts = 3
            attempt = 0
            retry_delay = 2

            while attempt < max_attempts:
                try:
                    self.ssh_conn = await asyncssh.connect(
                        host=config.SSH_HOST,
                        port=int(config.SSH_PORT),
                        username=config.SSH_USER,
                        password=config.SSH_PASSWORD,
                        known_hosts=None
                    )
                    logger.info("SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return True

                except (asyncssh.DisconnectError, asyncssh.ProcessError) as e:
                    logger.error(f"SSH –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {str(e)}")
                    attempt += 1

                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ SSH: {str(e)}")
                    break

                if attempt < max_attempts:
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2

            return False

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False

    async def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SSH –∫–æ–º–∞–Ω–¥—É"""
        async with self.lock:
            try:
                if not self.ssh_conn:
                    if not await self.connect():
                        return None, None

                process = await self.ssh_conn.run(command)
                return process.stdout, process.stderr

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
                if await self.connect():
                    process = await self.ssh_conn.run(command)
                    return process.stdout, process.stderr
                return None, None

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.ssh_conn:
            try:
                self.ssh_conn.close()
            except:
                pass
            self.ssh_conn = None

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ SSH –º–µ–Ω–µ–¥–∂–µ—Ä–∞

class SSHManager:
    def __init__(self):
        self.ssh_conn = None
        self.lock = asyncio.Lock()

    async def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            if self.ssh_conn:
                try:
                    self.ssh_conn.close()
                except:
                    pass

            max_attempts = 3
            attempt = 0
            retry_delay = 2

            while attempt < max_attempts:
                try:
                    self.ssh_conn = await asyncssh.connect(
                        host=config.SSH_HOST,
                        port=int(config.SSH_PORT),
                        username=config.SSH_USER,
                        password=config.SSH_PASSWORD,
                        known_hosts=None
                    )
                    logger.info("SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return True

                except (asyncssh.DisconnectError, asyncssh.ProcessError) as e:
                    logger.error(f"SSH –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {str(e)}")
                    attempt += 1

                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ SSH: {str(e)}")
                    break

                if attempt < max_attempts:
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2

            return False

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False

    async def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SSH –∫–æ–º–∞–Ω–¥—É"""
        async with self.lock:
            try:
                if not self.ssh_conn:
                    if not await self.connect():
                        return None, None

                process = await self.ssh_conn.run(command)
                return process.stdout, process.stderr

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
                if await self.connect():
                    process = await self.ssh_conn.run(command)
                    return process.stdout, process.stderr
                return None, None

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.ssh_conn:
            try:
                self.ssh_conn.close()
            except:
                pass
            self.ssh_conn = None
class SearchManager:
    def __init__(self):
        self.active_searches = {}
        self.player_searches = {}
        self.search_counter = 0
        self.player_active_matches = {}

    def create_new_search(self):
        self.search_counter += 1
        search_id = self.search_counter
        self.active_searches[search_id] = {
            'players': [],
            'messages': {},
            'start_time': datetime.now()
        }
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å ID {search_id}")
        return search_id

    def add_player(self, search_id, player_data):
        user_id = str(player_data['user_id'])

        if user_id in self.player_searches:
            old_search_id = self.player_searches[user_id]
            if old_search_id != search_id:
                self.remove_player(user_id)

        if search_id in self.active_searches:
            if len(self.active_searches[search_id]['players']) >= config.MAX_PLAYERS:
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ {search_id}")
                return False

            self.active_searches[search_id]['players'].append(player_data)
            self.player_searches[user_id] = search_id
            logger.info(f"–ò–≥—Ä–æ–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∏—Å–∫ {search_id}")
            return True
        return False

    def remove_player(self, user_id):
        search_id = self.player_searches.get(str(user_id))
        if search_id and search_id in self.active_searches:
            players = list(self.active_searches[search_id]['players'])
            self.active_searches[search_id]['players'] = [
                player for player in players
                if str(player['user_id']) != str(user_id)
            ]
            self.active_searches[search_id]['messages'].pop(str(user_id), None)
            self.player_searches.pop(str(user_id), None)

            logger.info(f"–ò–≥—Ä–æ–∫ {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞ {search_id}")

            if not self.active_searches[search_id]['players']:
                self.active_searches.pop(search_id, None)
                logger.info(f"–ü–æ–∏—Å–∫ {search_id} —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤")

    def is_player_in_search(self, user_id):
        return str(user_id) in self.player_searches

    def is_player_in_match(self, user_id):
        return str(user_id) in self.player_active_matches

    def add_player_to_match(self, user_id, screen_name):
        self.player_active_matches[str(user_id)] = screen_name
        logger.info(f"–ò–≥—Ä–æ–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á {screen_name}")

    def remove_player_from_match(self, user_id):
        user_id = str(user_id)
        if user_id in self.player_active_matches:
            screen_name = self.player_active_matches.pop(user_id)
            logger.info(f"–ò–≥—Ä–æ–∫ {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞—Ç—á–∞ {screen_name}")

    def get_player_search(self, user_id):
        search_id = self.player_searches.get(str(user_id))
        return self.active_searches.get(search_id)

    async def cleanup_inactive_matches(self):
        inactive_players = []

        for user_id, screen_name in self.player_active_matches.items():
            stdout, stderr = await ssh_manager.execute_command(f"screen -ls | grep {screen_name}")
            if stdout and not stdout:
                inactive_players.append(user_id)

        for user_id in inactive_players:
            self.remove_player_from_match(user_id)
            logger.info(f"–û—á–∏—â–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}")

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
search_manager = SearchManager()

async def check_port_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤"""
    try:
        for port in range(config.SERVER_START_PORT, config.SERVER_END_PORT + 1):
            stdout, stderr = await ssh_manager.execute_command(f"netstat -tuln | grep :{port}")
            if not stdout or not stdout.strip():
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {port}")
                return port

        logger.error("–í—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: {e}")
        return None

async def check_server_status(screen_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        match_logger = logging.getLogger(screen_name)

        stdout, stderr = await ssh_manager.execute_command(f"screen -ls | grep {screen_name}")
        if stdout:
            screen_status = stdout
            match_logger.debug(f"–°—Ç–∞—Ç—É—Å screen —Å–µ—Å—Å–∏–∏: {screen_status}")

            if not screen_status:
                match_logger.error("Screen —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None

            await ssh_manager.execute_command(f"rm -f /tmp/status_{screen_name}.txt")
            await asyncio.sleep(1)

            await ssh_manager.execute_command(f"screen -S {screen_name} -X stuff 'status\\n'")
            await asyncio.sleep(10)

            await ssh_manager.execute_command(f"screen -S {screen_name} -X hardcopy /tmp/status_{screen_name}.txt")
            await asyncio.sleep(2)

            stdout, stderr = await ssh_manager.execute_command(f"cat /tmp/status_{screen_name}.txt")
            if stdout:
                status_output = stdout
                match_logger.debug(f"–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:\n{status_output}")

                active_players = set()
                ct_score = 0
                t_score = 0
                game_ended = False

                for line in status_output.split('\n'):
                    if '#' in line and ('STEAM' in line or 'player' in line.lower()):
                        if 'active' in line.lower():
                            parts = line.split()
                            if len(parts) >= 5:
                                try:
                                    player_name = parts[2].strip('"')
                                    player_ip = parts[-1].split(':')[0]
                                    active_players.add(f"{player_name}_{player_ip}")
                                except Exception as e:
                                    match_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä–æ–∫–∞: {line}. –û—à–∏–±–∫–∞: {e}")

                    if 'CT' in line and 'score' in line.lower():
                        try:
                            ct_score = int(line.split()[-1])
                        except Exception as e:
                            match_logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CT score: {e}")
                    if 'TERRORIST' in line and 'score' in line.lower():
                        try:
                            t_score = int(line.split()[-1])
                        except Exception as e:
                            match_logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ T score: {e}")

                    if 'game over' in line.lower() or 'match ended' in line.lower():
                        game_ended = True

                if ct_score >= config.WINNING_SCORE or t_score >= config.WINNING_SCORE:
                    game_ended = True

                return {
                    'active_players': len(active_players),
                    'ct_score': ct_score,
                    't_score': t_score,
                    'game_ended': game_ended
                }

        return None

    except Exception as e:
        match_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

async def start_server(selected_map, server_password):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä"""
    try:
        port = await check_port_availability()
        if not port:
            logger.error("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
            return None

        screen_name = f"server_{selected_map}_{port}_{int(datetime.now().timestamp())}"
        match_logger = setup_match_logger(screen_name)
        match_logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: {screen_name}")

        stdout, stderr = await ssh_manager.execute_command(f"netstat -tuln | grep :{port}")
        if stdout:
            match_logger.error(f"–ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç")
            return None

        config_command = f"echo 'sv_password {server_password}' > {config.BASE_SERVER_PATH}/cfg/server_password.cfg"
        await ssh_manager.execute_command(config_command)
        await asyncio.sleep(2)

        launch_command = (
            f"cd {config.BASE_SERVER_PATH} && "
            f"screen -dmS {screen_name} bash -c '"
            f"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./bin && "
            f"./dedicated_launcher -console +map {selected_map} "
            f"-maxplayers {config.MAX_PLAYERS} -port {port} "
            f"+sv_lan 0 -game cm -tickrate 100'"
        )

        await ssh_manager.execute_command(launch_command)
        await asyncio.sleep(15)

        stdout, stderr = await ssh_manager.execute_command(f"screen -ls | grep {screen_name}")
        if not stdout:
            match_logger.error("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return None

        server_commands = [
            f"sv_password {server_password}",
            "mp_warmuptime 900",
            "mp_autoteambalance 0",
            "mp_limitteams 0",
            "mp_warmup_start"
        ]

        for cmd in server_commands:
            await ssh_manager.execute_command(f"screen -S {screen_name} -X stuff '{cmd}\\n'")
            await asyncio.sleep(2)

        match_logger.info(f"–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        return screen_name, port

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def setup_match_logger(screen_name):
    """–°–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–∞—Ç—á–∞"""
    log_file = os.path.join(config.LOG_DIRECTORY, f"match_{screen_name}.log")
    match_logger = logging.getLogger(screen_name)
    match_logger.setLevel(logging.INFO)

    if not match_logger.handlers:
        handler = logging.FileHandler(log_file)
        handler.setFormatter(logging.Formatter(config.LOG_FORMAT))
        match_logger.addHandler(handler)

    return match_logger

async def start_match(screen_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Ç—á"""
    try:
        await ssh_manager.execute_command(f"screen -S {screen_name} -X stuff 'mp_warmup_end\\n'")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Ç—á–∞: {e}")
        return False

async def stop_server(screen_name):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
    try:
        match_logger = logging.getLogger(screen_name)
        match_logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        stdout, stderr = await ssh_manager.execute_command(f"screen -ls | grep {screen_name}")
        if not stdout:
            match_logger.warning("Screen —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return True

        await ssh_manager.execute_command(f"screen -S {screen_name} -X stuff 'quit\\n'")
        await asyncio.sleep(2)

        await ssh_manager.execute_command(f"screen -S {screen_name} -X quit")
        await asyncio.sleep(1)

        stdout, stderr = await ssh_manager.execute_command(f"screen -ls | grep {screen_name}")
        if stdout:
            await ssh_manager.execute_command(f"pkill -f {screen_name}")
            await asyncio.sleep(1)

        await ssh_manager.execute_command(f"rm -f /tmp/status_{screen_name}.txt")
        await ssh_manager.execute_command(f"rm -f /tmp/match_start_{screen_name}.txt")

        match_logger.info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {screen_name}: {e}")
        return False

async def monitor_server(screen_name, player_ids):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    match_logger = setup_match_logger(screen_name)
    match_logger.info(f"–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ {screen_name}")
    match_logger.info(f"–ò–≥—Ä–æ–∫–∏: {player_ids}")

    start_time = datetime.now().timestamp()
    empty_server_checks = 0
    warned_times = set()
    match_started = False
    initial_connection_time = 500  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    check_interval = 10  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    for user_id in player_ids:
        search_manager.add_player_to_match(str(user_id), screen_name)

    try:
        while True:
            current_time = datetime.now().timestamp()
            elapsed_time = current_time - start_time

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not match_started:
                for warning_time in config.WARNING_TIMES:
                    time_left = config.TOTAL_WAIT_TIME - elapsed_time
                    if time_left <= warning_time and warning_time not in warned_times:
                        minutes_left = int(warning_time / 60)
                        await notify_time_warning(player_ids, minutes_left)
                        warned_times.add(warning_time)
                        match_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {minutes_left} –º–∏–Ω—É—Ç –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")

                if elapsed_time >= config.TOTAL_WAIT_TIME:
                    match_logger.info("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                    await notify_timeout(player_ids)
                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            status = await check_server_status(screen_name)
            if not status:
                match_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
                await notify_players_error(player_ids)
                break

            match_logger.info(f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {status}")

            if status['game_ended'] and match_started:
                match_logger.info("–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω")
                await notify_match_end(player_ids, status['ct_score'], status['t_score'])
                break

            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—É—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if elapsed_time > initial_connection_time:
                if status['active_players'] == 0:
                    empty_server_checks += 1
                    match_logger.warning(f"–°–µ—Ä–≤–µ—Ä –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ {empty_server_checks}/{config.MAX_EMPTY_CHECKS}")
                    if empty_server_checks >= config.MAX_EMPTY_CHECKS:
                        match_logger.info("–°–µ—Ä–≤–µ—Ä –ø—É—Å—Ç –±–æ–ª–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫")
                        await notify_server_empty(player_ids)
                        break
                else:
                    empty_server_checks = 0

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –≤—Å–µ –∏–≥—Ä–æ–∫–∏
            if not match_started and status['active_players'] >= len(player_ids):
                match_logger.info("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á")
                match_started = await start_match(screen_name)
                if match_started:
                    await notify_match_start(player_ids)
                    initial_connection_time = 0  # –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ç—á–∞ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—É—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä

            await asyncio.sleep(check_interval)

    except Exception as e:
        match_logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
        await notify_players_error(player_ids)

    finally:
        for user_id in player_ids:
            search_manager.remove_player_from_match(str(user_id))

        await stop_server(screen_name)
        match_logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞")

def generate_random_password(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

def generate_status_message(search_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–∏—Å–∫–∞"""
    search_data = search_manager.active_searches.get(search_id)
    if search_data:
        count = len(search_data['players'])
        return (
            f"üë• –ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤:\n"
            f"üë®‚Äçüë¶ –ù–∞–π–¥–µ–Ω–æ: {count} –∏–∑ {config.MIN_PLAYERS_FOR_START} ‚úÖ"
        )
    return "üë• –ü–æ–∏—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"

def search_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫", callback_data="start_search")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")
    return keyboard.as_markup()

async def notify_match_start(player_ids):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞"""
    message = "üéÆ –ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è! –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞ –∏–≥—Ä–æ–∫—É {user_id}: {e}")

async def notify_match_end(player_ids, ct_score, t_score):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞"""
    message = (
        f"üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!"
    )
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞ –∏–≥—Ä–æ–∫—É {user_id}: {e}")

async def notify_time_warning(player_ids, minutes_left):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    message = (
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç!\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É, –∏–Ω–∞—á–µ –æ–Ω –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    )
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")

async def notify_timeout(player_ids):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    message = (
        "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!\n"
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
    )
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ –∏–≥—Ä–æ–∫—É {user_id}: {e}")

async def notify_server_empty(player_ids):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—É—Å—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    message = (
        "–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!!\n"
        "–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
    )
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏–≥—Ä–æ–∫—É {user_id}: {e}")
def confirmation_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="confirm_ready")
    return keyboard.as_markup()
async def notify_players_error(player_ids):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ—à–∏–±–∫–µ"""
    message = (
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n"
        "–°–µ—Ä–≤–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä—ã."
    )
    for user_id in player_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏–≥—Ä–æ–∫—É {user_id}: {e}")

@dp.message(Command("search"))
async def handle_search(message: types.Message):
    user_id = str(message.from_user.id)
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥—ã /search
    if user_id in command_cooldowns and command_cooldowns[user_id] > current_time:
        remaining_time = int(command_cooldowns[user_id] - current_time)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    command_cooldowns[user_id] = current_time + 30

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–∞—Ç—á–∞
    if user_id in user_cooldown and user_cooldown[user_id] > current_time:
        remaining_time = int(user_cooldown[user_id] - current_time)
        minutes, seconds = divmod(remaining_time, 60)
        await message.answer(
            f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–∞—Ç—á. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!"
        )
        return

    player_data = {"user_id": user_id, "name": message.from_user.first_name}

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    active_search_id = None
    for search_id, search_data in search_manager.active_searches.items():
        if len(search_data["players"]) < config.MAX_PLAYERS:
            active_search_id = search_id
            break

    if active_search_id:
        if search_manager.add_player(active_search_id, player_data):
            search_status = generate_status_message(active_search_id)
            msg = await message.answer(
                search_status,
                reply_markup=search_keyboard()
            )
            search_manager.active_searches[active_search_id]["messages"][user_id] = msg
            await update_all_players(active_search_id)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    new_search_id = search_manager.create_new_search()
    if search_manager.add_player(new_search_id, player_data):
        search_status = generate_status_message(new_search_id)
        msg = await message.answer(
            search_status,
            reply_markup=search_keyboard()
        )
        search_manager.active_searches[new_search_id]["messages"][user_id] = msg
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.")
@dp.callback_query(lambda call: call.data == "start_search")
async def handle_start_search(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    search_id = search_manager.player_searches.get(user_id)

    if not search_id:
        await call.answer("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    search_data = search_manager.active_searches.get(search_id)
    if not search_data:
        await call.answer("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if search_data.get('server_creating', False):
        await call.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è!")
        return

    if len(search_data['players']) < config.MIN_PLAYERS_FOR_START:
        await call.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!")
        return

    await finish_search(search_id)
    await call.answer("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á!")
    
@dp.callback_query(lambda call: call.data == "cancel_search")
async def handle_cancel_search(call: types.CallbackQuery):
    try:
        user_id = str(call.from_user.id)
        search_manager.remove_player(user_id)

        try:
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω."
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                await call.message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")

        await call.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
        try:
            await call.message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        except:
            pass
async def cancel_if_not_confirmed(search_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    await asyncio.sleep(60)  # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥

    search_data = search_manager.active_searches.get(search_id)
    if not search_data:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —É—á–∞—Å—Ç–∏–µ
    if len(search_data.get("confirmed_players", set())) < len(search_data['players']):
        for player in search_data['players']:
            user_id = str(player['user_id'])
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ö—Ç–æ-—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ. –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–∏—Å–∫ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        search_manager.active_searches.pop(search_id, None)
async def update_all_players(search_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"""
    search_data = search_manager.active_searches.get(search_id)
    if not search_data:
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
    new_status_message = generate_status_message(search_id)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    messages_copy = dict(search_data['messages'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for user_id, msg in messages_copy.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤—Å—ë –µ—â—ë –≤ –ø–æ–∏—Å–∫–µ
            if user_id not in [player['user_id'] for player in search_data['players']]:
                # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –ø–æ–∏—Å–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if msg:
                    try:
                        await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
                search_data['messages'].pop(user_id, None)
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
            if msg and msg.text != new_status_message:
                try:
                    await bot.edit_message_text(
                        chat_id=msg.chat.id,
                        message_id=msg.message_id,
                        text=new_status_message,
                        reply_markup=search_keyboard()
                    )
                except Exception as e:
                    if "message is not modified" not in str(e):
                        logger.error(f"–û—à–∏–±–∫–∞ API Telegram –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
            if search_id in search_manager.active_searches:
                search_data['messages'].pop(user_id, None)

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(search_data["players"]) >= config.MAX_PLAYERS:
        search_data["confirmed_players"] = set()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        for player in search_data["players"]:
            user_id = player["user_id"]
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="üéÆ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–±–æ—Ä–µ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ.",
                    reply_markup=confirmation_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç —É—á–∞—Å—Ç–∏–µ
        asyncio.create_task(cancel_if_not_confirmed(search_id))

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫
    if len(search_data['players']) >= config.MIN_PLAYERS_FOR_START:
        await finish_search(search_id)

@dp.callback_query(lambda call: call.data == "confirm_ready")
async def handle_confirm_ready(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Ç—á–µ"""
    user_id = str(call.from_user.id)
    search_id = search_manager.player_searches.get(user_id)

    if not search_id:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    search_data = search_manager.active_searches.get(search_id)
    if not search_data:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö
    if user_id not in search_data["confirmed_players"]:
        search_data["confirmed_players"].add(user_id)

    confirmed_count = len(search_data["confirmed_players"])
    total_count = len(search_data["players"])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ
    updated_message = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ: {confirmed_count}/{total_count}\n\n–ñ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö..."

    for player in search_data["players"]:
        player_id = str(player["user_id"])
        try:
            await bot.edit_message_text(
                chat_id=player_id,
                message_id=search_data["messages"][player_id].message_id,
                text=updated_message,
                reply_markup=confirmation_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {player_id}: {e}")

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á
    if confirmed_count >= total_count:
        await finish_search(search_id)
    else:
        await call.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ñ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.")
async def finish_search(search_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
    search_data = search_manager.active_searches.get(search_id)
    if not search_data or len(search_data['players']) < config.MIN_PLAYERS_FOR_START:
        logger.error(f"–ü–æ–∏—Å–∫ {search_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ
    if len(search_data.get("confirmed_players", set())) < len(search_data['players']):
        logger.error(f"–ü–æ–∏—Å–∫ {search_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ")
        for user_id, msg in search_data['messages'].items():
            try:
                await bot.send_message(
                    msg.chat.id,
                    "‚ö†Ô∏è –ñ–¥–∏—Ç–µ –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç —É—á–∞—Å—Ç–∏–µ!."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏–≥—Ä–æ–∫—É {user_id}: {e}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if search_data.get('server_creating', False):
        logger.warning(f"–°–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_id} —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        return

    search_data['server_creating'] = True

    try:
        messages_copy = dict(search_data['messages'])
        players_copy = list(search_data['players'])

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        player_ids = [int(player['user_id']) for player in players_copy]
        player_names = await get_player_names_from_db(player_ids)

        selected_map = random.choice(config.MAPS)
        server_password = generate_random_password()

        server_info = await start_server(selected_map, server_password)
        if not server_info:
            for user_id, msg in messages_copy.items():
                try:
                    await bot.send_message(
                        msg.chat.id,
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏–≥—Ä–æ–∫—É {user_id}: {e}")
            return

        screen_name, port = server_info

        random.shuffle(players_copy)
        ct_players = [player_names[p['user_id']] for i, p in enumerate(players_copy) if i % 2 == 0]
        t_players = [player_names[p['user_id']] for i, p in enumerate(players_copy) if i % 2 != 0]

        server_message = (
            f"üéÆ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üîµ Counter-Terrorist:\n{chr(10).join(ct_players)}\n\n"
            f"üî¥ Terrorist:\n{chr(10).join(t_players)}\n\n"
            f"üó∫ –ö–∞—Ä—Ç–∞: {selected_map}\n\n"
            f"üîê –ü–∞—Ä–æ–ª—å: {server_password}\n"
            f"üåê IP: {config.SERVER_IP}:{port}\n\n"
            f"üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏:\n"
            f"connect {config.SERVER_IP}:{port}; password {server_password}"
        )

        for user_id, msg in messages_copy.items():
            try:
                await bot.send_message(msg.chat.id, server_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
        asyncio.create_task(monitor_server(screen_name, player_ids))

        # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        if search_id in search_manager.active_searches:
            for player in players_copy:
                search_manager.player_searches.pop(str(player['user_id']), None)
            search_manager.active_searches.pop(search_id, None)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        current_time = time.time()
        for player in players_copy:
            user_cooldown[str(player['user_id'])] = current_time + 300  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ {search_id}: {e}")
        search_data['server_creating'] = False

async def get_player_names_from_db(player_ids):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    player_names = {}
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç cursor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "SELECT user_id, user_name FROM users WHERE user_id IN ({})".format(','.join('?' for _ in player_ids)),
            player_ids)
        rows = cursor.fetchall()
        for row in rows:
            player_names[str(row[0])] = row[1]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    return player_names


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format=config.LOG_FORMAT
    )
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(config.LOG_DIRECTORY):
        os.makedirs(config.LOG_DIRECTORY)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(router)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    last_cleanup = datetime.now().timestamp()

    while True:
        try:
            current_time = datetime.now().timestamp()
            if current_time - last_cleanup > 300:
                await search_manager.cleanup_inactive_matches()
                last_cleanup = current_time

            await dp.start_polling(bot)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
            await asyncio.sleep(5)

ssh_manager = SSHManager() 
if __name__ == "__main__":
    asyncio.run(main())