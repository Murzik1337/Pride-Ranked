import sqlite3
import random
import string
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMIN_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        unique_id TEXT,
        region TEXT,
        referral_code TEXT,
        invited_count INTEGER DEFAULT 0,
        registration_date TEXT,
        rank_5v5 TEXT DEFAULT 'Unranked',
        rank_2v2 TEXT DEFAULT 'Unranked'
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS friends (
        user_id INTEGER,
        friend_id INTEGER,
        PRIMARY KEY (user_id, friend_id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS friend_requests (
        from_id INTEGER,
        to_id INTEGER,
        status TEXT DEFAULT 'pending',
        PRIMARY KEY (from_id, to_id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS feedback (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER,
        username TEXT,
        type TEXT,  -- 'review' or 'complaint'
        rating INTEGER,  -- 1-5 for reviews, NULL for complaints
        category TEXT,  -- NULL for reviews, category for complaints
        feedback_text TEXT,
        media_type TEXT,  -- 'photo', 'video', or NULL
        media_id TEXT,  -- Telegram file ID for media
        submission_date TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    username = State()
    region = State()
    referral = State()

class AddFriend(StatesGroup):
    search = State()

class Feedback(StatesGroup):
    review_rating = State()
    review_text = State()
    complaint_category = State()
    complaint_text = State()
    complaint_media = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–¥–æ–≤
def generate_unique_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def generate_referral_code():
    return ''.join(random.choices(string.digits, k=6))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üéÆ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –ò–≥—Ä–∞—Ç—å")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")],
        [KeyboardButton(text="‚≠ê Premium"), KeyboardButton(text="üë• –î—Ä—É–∑—å—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤
REGIONS = [
    "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "üá∫üá∏ –°–®–ê",
    "üá™üá∫ –ï–≤—Ä–æ–ø–∞",
    "üá®üá≥ –ö–∏—Ç–∞–π",
    "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è",
    "üáØüáµ –Ø–ø–æ–Ω–∏—è",
]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (message.from_user.id,))
    if c.fetchone():
        await message.answer("üåà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pride Ranked!", reply_markup=get_main_menu())
        conn.close()
        return
    conn.close()

    welcome_text = (
        "üåà *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pride Ranked v1\\.1* üåà\n\n"
        "–û—â—É—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞ Clientmod —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º\\-–±–æ—Ç–∞\\. –í–∞—Å –∂–¥–µ—Ç:\n\n"
        "üèÜ –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç—á–∏\n"
        "üë• –†–µ–∂–∏–º—ã 2–Ω–∞2 –∏ 5–Ω–∞5\n"
        "üìä –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üé® –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "\\.\\.\\.–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\\!\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ—á—Ç–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Pride Ranked\\. "
        "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /register"
    )
    await message.answer(welcome_text, parse_mode="MarkdownV2", reply_markup=get_main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /register
@dp.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (message.from_user.id,))
    if c.fetchone():
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu())
        conn.close()
        return
    conn.close()

    await state.set_state(Registration.username)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, 3-16 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è _ –∏ -):",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
@dp.message(Registration.username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not re.match(r'^[a-zA-Z0-9_-]{3,16}$', username):
        await message.answer(
            "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-16 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, _ –∏–ª–∏ -. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(username=username)
    await state.set_state(Registration.region)

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=region)] for region in REGIONS], resize_keyboard=True)
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
@dp.message(Registration.region)
async def process_region(message: types.Message, state: FSMContext):
    region = message.text.strip()
    if region not in REGIONS:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!")
        return

    await state.update_data(region=region)
    await state.set_state(Registration.referral)

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True)
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
@dp.message(Registration.referral)
async def process_referral(message: types.Message, state: FSMContext):
    referral = message.text.strip() if message.text != "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    data = await state.get_data()

    unique_id = generate_unique_id()
    referral_code = generate_referral_code()
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''INSERT INTO users (telegram_id, username, unique_id, region, referral_code, registration_date)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (message.from_user.id, data['username'], unique_id, data['region'], referral_code, registration_date))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer(
        "üåà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pride Ranked!",
        reply_markup=get_main_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ –ü—Ä–æ—Ñ–∏–ª—å
@dp.message(lambda message: message.text == "üéÆ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = c.fetchone()
    conn.close()

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register", reply_markup=get_main_menu())
        return

    profile_text = (
        f"üéÆ *–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {user[1]}*\n\n"
        f"üÜî *–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:* {user[2]}\n"
        f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user[6]}\n"
        f"üåç *–†–µ–≥–∏–æ–Ω:* {user[3]}\n"
        f"üèÜ *–ó–≤–∞–Ω–∏–µ 5vs5:* {user[7]}\n"
        f"üèÜ *–ó–≤–∞–Ω–∏–µ 2vs2:* {user[8]}\n\n"
        f"üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* {user[4]}\n"
        f"üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:* {user[5]}"
        .replace(".", "\\.")
        .replace("-", "\\-")
        .replace("_", "\\_")
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    await message.answer(profile_text, parse_mode="MarkdownV2", reply_markup=get_main_menu())

# –ö–æ–º–∞–Ω–¥–∞ –î—Ä—É–∑—å—è
@dp.message(lambda message: message.text == "üë• –î—Ä—É–∑—å—è")
async def show_friends(message: types.Message):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''SELECT u.username FROM users u
                 JOIN friends f ON u.telegram_id = f.friend_id
                 WHERE f.user_id = ?''', (message.from_user.id,))
    friends = c.fetchall()
    conn.close()

    if not friends:
        friends_text = "üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç"
    else:
        friends_text = "üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:\n" + "\n".join([f"‚Ä¢ {friend[0]}" for friend in friends])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="add_friend")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="delete_friend")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")]
    ])
    await message.answer(friends_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
@dp.callback_query(lambda c: c.data == "add_friend")
async def add_friend(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddFriend.search)
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID, Telegram ID, —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

# –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∞
@dp.message(AddFriend.search)
async def process_friend_search(message: types.Message, state: FSMContext):
    search_query = message.text.strip()
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()

    user = None
    if search_query.startswith('@'):
        c.execute("SELECT telegram_id, username FROM users WHERE telegram_id = ?",
                  (search_query[1:],))
        user = c.fetchone()
    elif search_query.startswith('t.me/') or search_query.startswith('https://t.me/'):
        username = search_query.split('/')[-1]
        c.execute("SELECT telegram_id, username FROM users WHERE telegram_id = ?",
                  (username,))
        user = c.fetchone()
    elif re.match(r'^[A-Z0-9]{8}$', search_query):
        c.execute("SELECT telegram_id, username FROM users WHERE unique_id = ?",
                  (search_query,))
        user = c.fetchone()
    elif search_query.isdigit():
        c.execute("SELECT telegram_id, username FROM users WHERE telegram_id = ?",
                  (search_query,))
        user = c.fetchone()
    else:
        c.execute("SELECT telegram_id, username FROM users WHERE username = ?",
                  (search_query,))
        user = c.fetchone()

    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_menu())
        await state.clear()
        conn.close()
        return

    if user[0] == message.from_user.id:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!", reply_markup=get_main_menu())
        await state.clear()
        conn.close()
        return

    c.execute("SELECT * FROM friends WHERE user_id = ? AND friend_id = ?",
              (message.from_user.id, user[0]))
    if c.fetchone():
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∞—à –¥—Ä—É–≥!", reply_markup=get_main_menu())
        await state.clear()
        conn.close()
        return

    c.execute("SELECT * FROM friend_requests WHERE from_id = ? AND to_id = ? AND status = 'pending'",
              (message.from_user.id, user[0]))
    if c.fetchone():
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=get_main_menu())
        await state.clear()
        conn.close()
        return

    c.execute("INSERT INTO friend_requests (from_id, to_id) VALUES (?, ?)",
              (message.from_user.id, user[0]))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]}!", reply_markup=get_main_menu())
    try:
        await bot.send_message(
            user[0],
            f"üîî –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç {message.from_user.username or message.from_user.first_name}! "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–î—Ä—É–∑—å—è'.",
            reply_markup=get_main_menu()
        )
    except:
        pass

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data == "notifications")
async def show_notifications(callback: types.CallbackQuery):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''SELECT u.username, u.telegram_id FROM users u
                 JOIN friend_requests fr ON u.telegram_id = fr.from_id
                 WHERE fr.to_id = ? AND fr.status = 'pending' ''',
              (callback.from_user.id,))
    requests = c.fetchall()
    conn.close()

    if not requests:
        await callback.message.answer("üîî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è.", reply_markup=get_main_menu())
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for req in requests:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {req[0]}", callback_data=f"accept_{req[1]}"),
            InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {req[0]}", callback_data=f"reject_{req[1]}")
        ])

    await callback.message.answer("üîî –ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è:", reply_markup=keyboard)
    await callback.answer()

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data.startswith("accept_"))
async def accept_friend(callback: types.CallbackQuery):
    friend_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()

    c.execute("UPDATE friend_requests SET status = 'accepted' WHERE from_id = ? AND to_id = ?",
              (friend_id, callback.from_user.id))
    c.execute("INSERT OR IGNORE INTO friends (user_id, friend_id) VALUES (?, ?)",
              (callback.from_user.id, friend_id))
    c.execute("INSERT OR IGNORE INTO friends (user_id, friend_id) VALUES (?, ?)",
              (friend_id, callback.from_user.id))
    c.execute("SELECT username FROM users WHERE telegram_id = ?", (friend_id,))
    friend_username = c.fetchone()[0]
    conn.commit()
    conn.close()

    await callback.message.answer(f"‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {friend_username} –≤ –¥—Ä—É–∑—å—è!", reply_markup=get_main_menu())
    try:
        await bot.send_message(friend_id, f"‚úÖ {callback.from_user.username or callback.from_user.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!", reply_markup=get_main_menu())
    except:
        pass
    await callback.answer()

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data.startswith("reject_"))
async def reject_friend(callback: types.CallbackQuery):
    friend_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("UPDATE friend_requests SET status = 'rejected' WHERE from_id = ? AND to_id = ?",
              (friend_id, callback.from_user.id))
    c.execute("SELECT username FROM users WHERE telegram_id = ?", (friend_id,))
    friend_username = c.fetchone()[0]
    conn.commit()
    conn.close()

    await callback.message.answer(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {friend_username}.", reply_markup=get_main_menu())
    try:
        await bot.send_message(friend_id, f"‚ùå {callback.from_user.username or callback.from_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è.", reply_markup=get_main_menu())
    except:
        pass
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
@dp.callback_query(lambda c: c.data == "delete_friend")
async def delete_friend(callback: types.CallbackQuery):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''SELECT u.username, u.telegram_id FROM users u
                 JOIN friends f ON u.telegram_id = f.friend_id
                 WHERE f.user_id = ?''', (callback.from_user.id,))
    friends = c.fetchall()
    conn.close()

    if not friends:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {friend[0]}", callback_data=f"remove_{friend[1]}")]
        for friend in friends
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_friends")])
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("remove_"))
async def confirm_remove_friend(callback: types.CallbackQuery):
    friend_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT username FROM users WHERE telegram_id = ?", (friend_id,))
    friend_username = c.fetchone()
    if not friend_username:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
        conn.close()
        await callback.answer()
        return

    friend_username = friend_username[0]
    c.execute("DELETE FROM friends WHERE user_id = ? AND friend_id = ?", 
              (callback.from_user.id, friend_id))
    c.execute("DELETE FROM friends WHERE user_id = ? AND friend_id = ?",
              (friend_id, callback.from_user.id))
    conn.commit()
    conn.close()

    await callback.message.answer(f"üóë {friend_username} —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π.", reply_markup=get_main_menu())
    try:
        await bot.send_message(friend_id, f"‚ùå {callback.from_user.username or callback.from_user.first_name} —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –¥—Ä—É–∑–µ–π.", reply_markup=get_main_menu())
    except:
        pass
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥—Ä—É–∑–µ–π
@dp.callback_query(lambda c: c.data == "back_to_friends")
async def back_to_friends(callback: types.CallbackQuery):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute('''SELECT u.username FROM users u
                 JOIN friends f ON u.telegram_id = f.friend_id
                 WHERE f.user_id = ?''', (callback.from_user.id,))
    friends = c.fetchall()
    conn.close()

    if not friends:
        friends_text = "üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç"
    else:
        friends_text = "üë• –í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:\n" + "\n".join([f"‚Ä¢ {friend[0]}" for friend in friends])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="add_friend")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="delete_friend")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")]
    ])
    await callback.message.edit_text(friends_text, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
@dp.message(lambda message: message.text == "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_menu(message: types.Message):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT telegram_id, username FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = c.fetchone()
    conn.close()

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register", reply_markup=get_main_menu())
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤", callback_data="review")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ñ–∞–ª–æ–±–∞", callback_data="complaint")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer(
        f"üì© *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\\~\\~\\~\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user[1]}\\! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="MarkdownV2",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
@dp.callback_query(lambda c: c.data == "review")
async def start_review(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT submission_date FROM feedback WHERE telegram_id = ? AND type = 'review' ORDER BY submission_date DESC LIMIT 1",
              (callback.from_user.id,))
    last_review = c.fetchone()
    conn.close()

    if last_review:
        last_date = datetime.strptime(last_review[0], "%Y-%m-%d %H:%M:%S")
        if datetime.now() - last_date < timedelta(days=3):
            await callback.message.answer(
                "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 3 –¥–Ω—è.",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return

    await state.set_state(Feedback.review_rating)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê 1", callback_data="rating_1"),
         InlineKeyboardButton(text="‚≠ê‚≠ê 2", callback_data="rating_2")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê 3", callback_data="rating_3"),
         InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê 4", callback_data="rating_4")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5", callback_data="rating_5")]
    ])
    await callback.message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (1-5 –∑–≤–µ–∑–¥):", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("rating_"))
async def process_review_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await state.set_state(Feedback.review_text)
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (10-500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

@dp.message(Feedback.review_text)
async def save_review(message: types.Message, state: FSMContext):
    feedback_text = message.text.strip()
    if len(feedback_text) > 500 or len(feedback_text) < 10:
        await message.answer("‚ùå –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=get_main_menu())
        return

    data = await state.get_data()
    rating = data['rating']
    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT username FROM users WHERE telegram_id = ?", (message.from_user.id,))
    username = c.fetchone()[0]
    submission_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute('''INSERT INTO feedback (telegram_id, username, type, rating, feedback_text, submission_date)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (message.from_user.id, username, 'review', rating, feedback_text, submission_date))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_text = (
        f"‚≠ê *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n\n"
        f"üë§ –û—Ç: {username}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}\n"
        f"üìÖ –î–∞—Ç–∞: {submission_date}\n"
        f"üìù –¢–µ–∫—Å—Ç: {feedback_text}"
        .replace(".", "\\.")
        .replace("-", "\\-")
        .replace("_", "\\_")
        .replace("!", "\\!")
    )
    
    try:
        await bot.send_message(ADMIN_ID, admin_text, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()
    await message.answer("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ! üéâ", reply_markup=get_main_menu())

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.message(Command("review"))
async def review_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º
    c.execute("SELECT COUNT(*), AVG(rating) FROM feedback WHERE type = 'review'")
    review_count, avg_rating = c.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    c.execute("""
        SELECT category, COUNT(*) 
        FROM feedback 
        WHERE type = 'complaint' 
        GROUP BY category
    """)
    complaints = c.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∂–∞–ª–æ–±*\n\n"
        f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {review_count}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {round(avg_rating, 2) if avg_rating else 0}\n\n"
        f"‚ö†Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∞–ª–æ–±:*\n"
    ).replace(".", "\\.").replace("-", "\\-").replace("_", "\\_")
    
    for category, count in complaints:
        stats_text += f"‚Ä¢ {category}: {count}\n"
    
    conn.close()
    
    await message.answer(stats_text, parse_mode="MarkdownV2")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã
@dp.callback_query(lambda c: c.data == "complaint")
async def start_complaint(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞", callback_data="complaint_bot")],
        [InlineKeyboardButton(text="üèÜ –ñ–∞–ª–æ–±–∞ –Ω–∞ –º–∞—Ç—á", callback_data="complaint_match")],
        [InlineKeyboardButton(text="üë§ –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞", callback_data="complaint_player")],
        [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data="complaint_other")]
    ])
    await callback.message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("complaint_"))
async def process_complaint_category(callback: types.CallbackQuery, state: FSMContext):
    category = {
        "complaint_bot": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞",
        "complaint_match": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –º–∞—Ç—á",
        "complaint_player": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞",
        "complaint_other": "–î—Ä—É–≥–æ–µ"
    }[callback.data]
    await state.update_data(category=category)
    await state.set_state(Feedback.complaint_text)
    await callback.message.answer(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É (10-500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

@dp.message(Feedback.complaint_text)
async def process_complaint_text(message: types.Message, state: FSMContext):
    complaint_text = message.text.strip()
    if len(complaint_text) > 500 or len(complaint_text) < 10:
        await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=get_main_menu())
        return

    await state.update_data(complaint_text=complaint_text)
    await state.set_state(Feedback.complaint_media)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True)
    await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=keyboard
    )

@dp.message(Feedback.complaint_media)
async def process_complaint_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    complaint_text = data['complaint_text']
    category = data['category']
    media_type = None
    media_id = None

    if message.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        pass
    elif message.photo:
        media_type = 'photo'
        media_id = message.photo[-1].file_id
    elif message.video:
        media_type = 'video'
        media_id = message.video.file_id
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=get_main_menu())
        return

    conn = sqlite3.connect('pride_ranked.db')
    c = conn.cursor()
    c.execute("SELECT username FROM users WHERE telegram_id = ?", (message.from_user.id,))
    username = c.fetchone()[0]
    submission_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute('''INSERT INTO feedback (telegram_id, username, type, category, feedback_text, media_type, media_id, submission_date)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
              (message.from_user.id, username, 'complaint', category, complaint_text, media_type, media_id, submission_date))
    conn.commit()
    conn.close()

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É
    admin_text = (
        f"‚ö†Ô∏è *–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìÖ –î–∞—Ç–∞: {submission_date}\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üìú –¢–µ–∫—Å—Ç: {complaint_text}"
        .replace(".", "\\.")
        .replace("-", "\\-")
        .replace("_", "\\_")
        .replace("!", "\\!")
    )
    try:
        await bot.send_message(ADMIN_ID, admin_text, parse_mode="MarkdownV2")
        if media_type == 'photo':
            await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
        elif media_type == 'video':
            await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É.", reply_markup=get_main_menu())
        await state.clear()
        return

    await state.clear()
    await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!", reply_markup=get_main_menu())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(lambda c: c.data == "stats")
async def process_stats(callback: types.CallbackQuery):
    await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", reply_markup=get_main_menu())
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())